#!usr/bin/env python -tt

# == Summary
#   Name: Motif-MHC for Class I peptide motif
#   New from motif-X: add z-score to identify the significant residue-position pair
#   this criteria is more accurate statistically
#   New from motif-X: use Numpy to align matrices with various length
#
# == Examples
#   This command generate peptide motifs with variable length 7-14:
#     python2.7 ./src/motif-Z.py --inputf data/data_file.txt --outputf results/data_file --ft [txt, csv, csvGFY] --maxLength 14 --minLength 7
# 
#   Like the first example, but explicitly indicate Z=5 or other Z score cut-off:
#     python2.7 ./src/motif-Z.py --inputf data/data_file.txt --outputf results/data_file --ft [txt/csv/csvGFY] --maxLength 14 --minLength 7 --zscore [1-6]
#
#   Use optional parameter --bp, i.e. 1e-6, which is the arbitrary criteria for significant rp pair
#     python2.7 ./src/motif-Z.py --inputf data/data_file.txt --outputf results/data_file --ft [txt/csv/csvGFY] --maxLength 14 --minLength 7 --zscore N
#   
#   This command prints out help info:
#     python2.7 motif-Z.py -h
#
# == Usage
#   Usage: python2.7 motif-Z.py --inputf <input filename> --outputf <output filename> --maxLength 14 --minLength 7 
#
#   For help use: python2.7 motif-Z.py -h
#
# == Options
#   -h, --help          Displays help message
#   -V, --verbose       Verbose output
#
# == Author
#   Xueheng Zhao


import re
import csv
import os
import sys
import copy
import time
import timeit
from math import log, exp
from types import *
import logging
from decimal import *

#import parseParameters as pp
import readFile as rf
import buildMatrix as bmx
import utility
import buildMotif as bmf



# Global variables
global debug
debug = False


# == Function Summary
#   Main function to read in configuration file parameters, input datasets and output
#   motif results derived  

def runScript(file_type, peps, data_summary, result_file_path, statistics_file_path, debug_file_path, max_length, min_length, zscore_flag,
              binomial_prob_threshold, threshold_fg): 
    
    logging.basicConfig(filename='/var/www/motif-Z/log/motif_Z.log', filemode='w', level=logging.DEBUG)
    logging.error('Started')
    start_time = time.time() # Check run time of the program
               
    """Background file are saved in .txt file with certain length (i.e. 7, 8, 9, 10, 11, 12, 13, 14) peptide sequences
    in each line by psedo-generated from peptide database with distribution as described in randomPep_1M_distribution.txt"""
    
    options = {12: '/var/www/motif-Z/bg_files/1M_randomMHC_7to14mers_wc4.txt',
               14: '/var/www/motif-Z/bg_files/BG_1M_VL.txt'
    }
    
    background_file = options[14]

    # Constants
    MAX_LENGTH = int(max_length) # Here it is the maximum length of motif input by user
    MIN_LENGTH = int(min_length) # Minimum motif length input
    AA_LIST = 'ARNDCEQGHILKMFPSTWYV'
    Z_LIST = ['1', '2', '3', '4', '5', '6']
    
    #BINOMIAL_PROB_THRESHOLD = float(binomial_prob_threshold)
    #print('BINOMIAL_PROB_THRESHOLD = '), BINOMIAL_PROB_THRESHOLD
    
    if zscore_flag in Z_LIST:
        zscore = int(zscore_flag)
        ZSCORE_FLAG = zscore
        BINOMIAL_PROB_THRESHOLD = log(float(1000))
    else:
        ZSCORE_FLAG = 0
        BINOMIAL_PROB_THRESHOLD = log(float(binomial_prob_threshold))
        
    PSEUDO_N_SIZE = 50
    LIST_KMERS = range(MIN_LENGTH, MAX_LENGTH+1)
     
# == Data structure used to store FG and BG peptide sequences: Set
   
    peps_size = len(peps)
    #Take the statistics of foreground peptides including counts for each length
    statistics_pep_fg = {}
    #print('Total unique peptides in input data used in the analysis = '), peps_size
    
    # Foreground peptide array save in the data structure set
    foreground_peps_set = set([])
    num_fg_pep = 0 # number of peptide seqs in the foreground
    for pep in peps:
        #if not '.' in pep:
	pep = pep.upper()
        peptide = re.sub("[^ARNDCEQGHILKMFPSTWYV]", "U", pep)
	    
        if len(peptide) <=MAX_LENGTH and len(peptide) >= MIN_LENGTH:
            num_fg_pep += 1
            foreground_peps_set.add(peptide)
            length = len(peptide)
            if not statistics_pep_fg.has_key(length):
                statistics_pep_fg[length] = 1
            else:
                statistics_pep_fg[length] += 1
    #calculate medium length of peptides in foreground based on majority rule
    #print "statistics_pep_fg[9] = ", statistics_pep_fg[9]
    
    amount_largest = 0
    medium_pep_length = 0
    for category in statistics_pep_fg:    
        if statistics_pep_fg[category] > amount_largest:
            medium_pep_length = category
            amount_largest = statistics_pep_fg[category]
    #print "medium_length of input peptides =", medium_pep_length
    
    # Build background dataset from input peptide file
    background_peps_set = set([])  # Background peptide array (control)
    num_bg_pep = 0 # number of motifs in the background
     #Take the statistics of background peptides including counts for each length
    statistics_pep_bg = {}
    if os.path.exists(background_file):
        f_bg = open(background_file, 'r')
        line = f_bg.readline()
        while line:
            line = re.sub("[^A-Za-z]", "", line)
            if len(line) <=MAX_LENGTH and len(line) >= MIN_LENGTH:
                num_bg_pep += 1
                background_peps_set.add(line)
                length = len(line)
                if not statistics_pep_bg.has_key(length):
                    statistics_pep_bg[length] = 1
                else:
                    statistics_pep_bg[length] += 1
            line = f_bg.readline()
        f_bg.close()    
    else:
        logging.error('%s background_file %s', 'The file ', ' doesn\'t exist')


    # Check the runtime of data readin
    #print('runtime of reading data = '), (time.time() - start_time)/60.0, "min"
    #start_time = time.time()
    
    # Save a copy of both fore/background datasets since the processing carried out in this step modify the
    # original dataset lists   
        
    original_fg = copy.deepcopy(foreground_peps_set)
    original_bg = copy.deepcopy(background_peps_set)
    
    # Category of foreground and background peptides by their length, this used for table 3
    fg_category = utility.categoryPepByLength(original_fg, LIST_KMERS)
    bg_category = utility.categoryPepByLength(original_bg, LIST_KMERS)
                    
    # Size of foreground and background 
    fg_size = len(original_fg)
    bg_size = len(original_bg)
    #print('fg_size = '), fg_size
    #print('bg_size = '), bg_size
    
    # Calculate pseudo count matrix
    pc_matrix = bmx.Matrix(MAX_LENGTH, original_bg)
    NT_pc_charMatrix = pc_matrix.charMatrixAlignedNT()
    CT_pc_charMatrix = pc_matrix.charMatrixAlignedCT()
    NT_pseudo_count_matrix = pc_matrix.aaFreqMatrix(NT_pc_charMatrix)
    CT_pseudo_count_matrix = pc_matrix.aaFreqMatrix(CT_pc_charMatrix)
    # Pre-calculate log_factorial_map 
    log_factorial_map = utility.log_factorial_map(fg_size)
    
    # Set up a data structure for table output about size in fg and bg in previous motif, and binomial probability
    # of last residue/position pair
    result_motif = {} 
    all_motif = set([]) # Initialize motif set to store the motifs identified from input data
    
    # Check the runtime of data readin
    #print('runtime of build precomputed matrices = '), (time.time() - start_time)/60.0, "min"
    #start_time = time.time()
    
    # Save stand output into the debug file with format for debugging
    saveout = sys.stdout
    fhout = open(debug_file_path, "w")      
    sys.stdout = fhout 
    
    
#     print("---------------------------------------------------------------------------------")
#     print("Start recursion")
    
    motifSet = bmf.MotifSet(MAX_LENGTH, BINOMIAL_PROB_THRESHOLD, NT_pseudo_count_matrix, CT_pseudo_count_matrix,
            threshold_fg, original_fg, original_bg, MIN_LENGTH, log_factorial_map, medium_pep_length, ZSCORE_FLAG)
    all_motifs_found, result_motif, motifs_dict = motifSet.produce_all_motif(foreground_peps_set, background_peps_set)
    
    # Save stand output to debug file and close the file handle
    sys.stdout = saveout                                     
    fhout.close()
    # Check the runtime of data readin
    #print('runtime of recursive search = '), (time.time() - start_time)/60.0, "min"
    
    start_time = time.time()
    # Write results in the result file
    f_result = open(result_file_path, 'wb')  
    f_result.write("Foreground has total peptides = " + str(fg_size) + "\n") 
    f_result.write("Backgorund has total peptides = " + str(bg_size) + "\n") 
     
    if os.path.exists(result_file_path):
        
        # write the result in file with str.format() 
        f_result.write('-----------------------------------------' + '---------------------------------------' + 
                       '-----------------------------------------' + '--------------------------------' + '\n') 

        f_result.write('{0:25}\t {1:7}\t {2:7}\t {3:7}\t {4:7}\t {5:7}\t {6:8}\t {7:8}\t {8:9}\n'.format("motif", "t_enrichment",
                     "in_t_fg", "fg_vs_branch", "in_t_bg", "bg_vs_branch", "log_p", "l_enrichment", "score"))
        f_result.write('-----------------------------------------' + '---------------------------------------' + 
                       '-----------------------------------------' + '--------------------------------' + '\n')   
        for rexp_motif in result_motif:
            # Format the bg_vs_branch and fg_vs_branch output
            result_motif[rexp_motif][0] = str(result_motif[rexp_motif][0][0]) + '/' + str(result_motif[rexp_motif][0][1])
            result_motif[rexp_motif][1] = str(result_motif[rexp_motif][1][0]) + '/' + str(result_motif[rexp_motif][1][1])
            # Wirte output data into the format described below
            if result_motif[rexp_motif][3] != 'NA':
                f_result.write('{0:25}\t {1:7}\t {2:7}\t {3:7}\t {4:7}\t {5:7}\t {6:8.2e}\t {7:7.1f}\t {8:8}\n'.format(rexp_motif, 
                            result_motif[rexp_motif][5], result_motif[rexp_motif][6], result_motif[rexp_motif][0], 
                            result_motif[rexp_motif][7], result_motif[rexp_motif][1], result_motif[rexp_motif][2], 
                            result_motif[rexp_motif][8], result_motif[rexp_motif][4]))
            else:
                f_result.write('{0:25}\t {1:7}\t {2:7}\t {3:7}\t {4:7}\t {5:7}\t {6:8.2e}\t {7:7}\t {8:8}\n'.format(rexp_motif, 
                            result_motif[rexp_motif][5], result_motif[rexp_motif][6], result_motif[rexp_motif][0], 
                            result_motif[rexp_motif][7], result_motif[rexp_motif][1], result_motif[rexp_motif][2], 
                            result_motif[rexp_motif][8], result_motif[rexp_motif][4]))
        f_result.close()
            
    else:
        logging.error("The file " + result_file_path + " doesn't exist")
        
    # Build a dictionary to store motif regular expression results and use this dictionary in the webpage output
    result_table_dict = {}
    for rexp_motif in result_motif:
        total_enrich = result_motif[rexp_motif][5]
        match_fg = result_motif[rexp_motif][6]
        p_value = '%.2E' % Decimal(exp(result_motif[rexp_motif][8]))
        score = round(result_motif[rexp_motif][4], 2)
        result_table_dict[rexp_motif] = [total_enrich, match_fg, p_value, score]
    
    # Build a dictionary to store motif regular expression results and use this dictionary in the webpage output
    stat_FG_dict = {}
    for key in statistics_pep_fg.keys():
        k_mer = key
        total_in_fg = data_summary[key]
        unique_in_fg = statistics_pep_fg[key]
        stat_FG_dict[k_mer] = [total_in_fg, unique_in_fg]
        
    # Build a dictionary to store motif regular expression results and use this dictionary in the webpage output
    stat_result_dict = {}
    motif_stat_dict = {k : {} for k in motifs_dict.keys()}
    for rexp_motif_str in motifs_dict:
        sum = 0
        stat_result_dict[rexp_motif_str] = []
        for kmer in range(MIN_LENGTH, MAX_LENGTH+1): #Compute sum with actual existing lengths in fg
			if kmer in fg_category:
				motif_stat_dict[rexp_motif_str][kmer] = utility.number_matched_pairs(fg_category[kmer], motifs_dict[rexp_motif_str])
			else:
				motif_stat_dict[rexp_motif_str][kmer] = 0
			sum += motif_stat_dict[rexp_motif_str][kmer]
 
	# Populate each motif with matched kmers, shorter or longer kmers will be populated with 'na' 
	for i in range(7, 15):
	    if i in motif_stat_dict[rexp_motif_str].keys():
			stat_result_dict[rexp_motif_str].append(motif_stat_dict[rexp_motif_str][i])
	    else:
			stat_result_dict[rexp_motif_str].append('na')
 	stat_result_dict[rexp_motif_str].append(sum) 
    
    # Write out data summary including how many peptide sequences with a certain length
    f_stat = open(statistics_file_path, 'wb')
    f_stat.write('Statistics of foreground peptides\n')
    f_stat.write('---------------------------------------\n')
    #f-stat.write('{0:7}\t {1:10}\t {1:10}\n'.format('k-mer', 'total', 'unique'))
    f_stat.write('%7s %10s %10s' % ('k-mer', 'total', 'unique'))
    f_stat.write('\n')
    f_stat.write('---------------------------------------\n')
    for key in data_summary.keys():
        if statistics_pep_fg.has_key(key):
            print "statistics_pep_fg[", key, "]= ", statistics_pep_fg[key]
            #f_stat.write('{0:7}\t {1:10}\t {1:10}\n'.format(key, data_summary[key], statistics_pep_fg[key]))
            f_stat.write('%7d %10d %10d\n' % (key, data_summary[key], statistics_pep_fg[key]))
        else:
            #f_stat.write('{0:7}\t {1:10}\t {1:10}\n'.format(key, data_summary[key], 'NA'))
            f_stat.write('%7d %10d %10s\n' % (key, data_summary[key], 'NA'))
                
    f_stat.write('\n')   
    f_stat.write('Statistics of background peptides\n')
    f_stat.write('---------------------------------------\n')
    f_stat.write('{0:7}\t {1:10}\n'.format("k-mer", "Total peptides"))
    f_stat.write('---------------------------------------\n')
    for key in statistics_pep_bg.keys():
        f_stat.write('{0:7}\t {1:10}\n'.format(key, statistics_pep_bg[key]))
           
    f_stat.write('\n\n')
    f_stat.write('Statistics of motifs\n')
    f_stat.write('-----------------------------------------' + '---------------------------------------' + 
                '-----------------------------------------' + '--------------------------------' + '\n') 

    f_stat.write('{0:25}\t {1:7}\t {2:7}\t {3:7}\t {4:7}\t {5:7}\t {6:7}\t {7:7}\t {8:7}\t {9:7}\n'.format("motif", 
                    "7mer", "8mer", "9mer", "10mer", "11mer", "12mer", "13mer", "14mer", "total"))
    f_stat.write('-----------------------------------------' + '---------------------------------------' + 
                '-----------------------------------------' + '--------------------------------' + '\n')
    motif_stat_dict = {k : {} for k in motifs_dict.keys()}
    for rexp_motif_str in motifs_dict:
        sum = 0
        for kmer in range(7, 15):
	    if kmer in fg_category:
                motif_stat_dict[rexp_motif_str][kmer] = utility.number_matched_pairs(fg_category[kmer], 
                                                                                     motifs_dict[rexp_motif_str])
                sum += motif_stat_dict[rexp_motif_str][kmer]
	    else:
		motif_stat_dict[rexp_motif_str][kmer] = 'na'   
        f_stat.write('{0:25}\t {1:7}\t {2:7}\t {3:7}\t {4:7}\t {5:7}\t {6:7}\t {7:7}\t {8:7}\t {9:7}\n'.format(rexp_motif_str, 
                    motif_stat_dict[rexp_motif_str][7], motif_stat_dict[rexp_motif_str][8], 
                    motif_stat_dict[rexp_motif_str][9], motif_stat_dict[rexp_motif_str][10],
                    motif_stat_dict[rexp_motif_str][11], motif_stat_dict[rexp_motif_str][12], 
                    motif_stat_dict[rexp_motif_str][13], motif_stat_dict[rexp_motif_str][14], sum))                
                
    f_stat.close()
    logging.error('Finished')    
    
    results = [result_table_dict, stat_FG_dict, stat_result_dict, debug_file_path]
    return results
        
